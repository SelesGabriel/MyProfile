@page "/contato"
@inject IJSRuntime js
@inject NavigationManager navigation
@inject EmailService emailService

<h3>Contato</h3>
<EditForm Model="email" OnValidSubmit="SendEmail">
    <DataAnnotationsValidator />
    <div class="col-md-6">
        <div class="col-md-6">
            <label>Seu nome: </label>
        </div>
        <div class="col-md-6">
            <InputText @bind-Value="@email.Nome" class="form-control" placeholder="Nome"/>
            <ValidationMessage For="(()=> email.Nome)" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="col-md-6">
            <label>Seu email: </label>
        </div>
        <div class="col-md-6">
            <InputText @bind-Value="@email.EndEmail" class="form-control" placeholder="Email"/>
            <ValidationMessage For="(()=> email.EndEmail)" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="col-md-6">
            <label>Seu telefone: </label>
        </div>
        <div class="col-md-6">
            <InputText @bind-Value="@email.NroTelefone" class="form-control" placeholder="Telefone"/>
            <ValidationMessage For="(()=> email.NroTelefone)" />
        </div>
    </div>
    <div class="col-md-6">
        <div class="col-md-6">
            <label>Mensagem: </label>
        </div>
        <div class="col-md-12">
            <InputTextArea @bind-Value="@email.Mensagem" class="form-control"/>
            <ValidationMessage For="(()=> email.Mensagem)" />
        </div>
    </div>
    <br />
    <button class="btn btn-success">Enviar</button>
</EditForm>

@code {

    Email email = new Email();
    public string EmailEnviado { get; set; } = "";
    public async Task SendEmail()
    {
        await emailService.PostAsync(email);
        await js.InvokeVoidAsync("alert", "Obrigado!! Em breve entrarei em contato");
        navigation.NavigateTo("");
    }

}
